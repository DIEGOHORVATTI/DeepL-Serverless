{"version":3,"sources":["../../../../src/modules/translate/shared/translatte.ts"],"sourcesContent":["import axios from 'axios'\nimport { SupportedLanguage } from './languages'\n\nexport type TranslationOptions = {\n  text: string\n  from: SupportedLanguage\n  to: SupportedLanguage\n}\n\n/**\n * @description Função que traduz um texto de um idioma para outro\n */\nexport const translatte = async ({ text, from, to }: TranslationOptions): Promise<string> => {\n  const baseURL = 'https://www2.deepl.com'\n  const urlMethod = 'LMT_handle_texts'\n  const urlFull = `${baseURL}/jsonrpc?client=chrome-extension,1.28.0&method=${encodeURIComponent(urlMethod)}`\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'User-Agent':\n      'DeepLBrowserExtension/1.28.0 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n    Accept: '*/*',\n    'Accept-Language': 'en-US,en;q=0.9',\n    Authorization: 'None',\n    'Cache-Control': 'no-cache',\n    Origin: 'chrome-extension://cofdbpoegempjloogbagkncekinflcnj',\n    Referer: 'https://www.deepl.com/'\n  }\n\n  const postData = {\n    jsonrpc: '2.0',\n    method: urlMethod,\n    id: 1,\n    params: {\n      splitting: 'newlines',\n      lang: {\n        source_lang_user_selected: from.toUpperCase(),\n        target_lang: to.toUpperCase()\n      },\n      texts: [\n        {\n          text,\n          requestAlternatives: 3\n        }\n      ],\n      timestamp: Date.now()\n    }\n  }\n\n  try {\n    const response = await axios.post(urlFull, postData, { headers })\n\n    const translation = response.data?.result?.texts?.[0]?.text ?? ''\n\n    return translation\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Erro na tradução:', error.response?.data)\n    }\n\n    throw new Error('Erro ao traduzir texto.')\n  }\n}\n"],"names":["translatte","text","from","to","baseURL","urlMethod","urlFull","encodeURIComponent","headers","Accept","Authorization","Origin","Referer","postData","jsonrpc","method","id","params","splitting","lang","source_lang_user_selected","toUpperCase","target_lang","texts","requestAlternatives","timestamp","Date","now","response","axios","post","translation","data","result","error","isAxiosError","console","Error"],"mappings":";;;;+BAYaA;;;eAAAA;;;8DAZK;;;;;;AAYX,MAAMA,aAAa,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAEC,EAAE,EAAsB;IACrE,MAAMC,UAAU;IAChB,MAAMC,YAAY;IAClB,MAAMC,UAAU,GAAGF,QAAQ,+CAA+C,EAAEG,mBAAmBF,YAAY;IAE3G,MAAMG,UAAU;QACd,gBAAgB;QAChB,cACE;QACFC,QAAQ;QACR,mBAAmB;QACnBC,eAAe;QACf,iBAAiB;QACjBC,QAAQ;QACRC,SAAS;IACX;IAEA,MAAMC,WAAW;QACfC,SAAS;QACTC,QAAQV;QACRW,IAAI;QACJC,QAAQ;YACNC,WAAW;YACXC,MAAM;gBACJC,2BAA2BlB,KAAKmB,WAAW;gBAC3CC,aAAanB,GAAGkB,WAAW;YAC7B;YACAE,OAAO;gBACL;oBACEtB;oBACAuB,qBAAqB;gBACvB;aACD;YACDC,WAAWC,KAAKC,GAAG;QACrB;IACF;IAEA,IAAI;QACF,MAAMC,WAAW,MAAMC,cAAK,CAACC,IAAI,CAACxB,SAASO,UAAU;YAAEL;QAAQ;QAE/D,MAAMuB,cAAcH,SAASI,IAAI,EAAEC,QAAQV,OAAO,CAAC,EAAE,EAAEtB,QAAQ;QAE/D,OAAO8B;IACT,EAAE,OAAOG,OAAO;QACd,IAAIL,cAAK,CAACM,YAAY,CAACD,QAAQ;YAC7BE,QAAQF,KAAK,CAAC,qBAAqBA,MAAMN,QAAQ,EAAEI;QACrD;QAEA,MAAM,IAAIK,MAAM;IAClB;AACF"}