{"version":3,"sources":["../../../../src/modules/translate/shared/translatte.ts"],"sourcesContent":["import axios from 'axios'\nimport { SupportedLanguage } from './languages'\n\nexport type TranslationOptions = {\n  text: string\n  from: SupportedLanguage\n  to: SupportedLanguage\n}\n\n/**\n * @description Função que traduz um texto de um idioma para outro\n */\nexport const translatte1 = async ({ text, from, to }: TranslationOptions): Promise<string> => {\n  const baseURL = 'https://www2.deepl.com'\n  const urlMethod = 'LMT_handle_texts'\n  const urlFull = `${baseURL}/jsonrpc?client=chrome-extension,1.28.0&method=${encodeURIComponent(urlMethod)}`\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'User-Agent':\n      'DeepLBrowserExtension/1.28.0 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',\n    Accept: '*/*',\n    'Accept-Language': 'en-US,en;q=0.9',\n    Authorization: 'None',\n    'Cache-Control': 'no-cache',\n    Origin: 'chrome-extension://cofdbpoegempjloogbagkncekinflcnj',\n    Referer: 'https://www.deepl.com/'\n  }\n\n  const postData = {\n    jsonrpc: '2.0',\n    method: urlMethod,\n    id: 1,\n    params: {\n      splitting: 'newlines',\n      lang: {\n        source_lang_user_selected: from.toUpperCase(),\n        target_lang: to.toUpperCase()\n      },\n      texts: [\n        {\n          text,\n          requestAlternatives: 3\n        }\n      ],\n      timestamp: Date.now()\n    }\n  }\n\n  try {\n    const response = await axios.post(urlFull, postData, { headers })\n\n    const translation = response.data?.result?.texts?.[0]?.text ?? ''\n\n    return translation\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      console.error('Erro na tradução:', error.response?.data)\n    }\n\n    throw new Error('Erro ao traduzir texto.')\n  }\n}\n\nexport const translatte = async ({ text, from, to }: TranslationOptions): Promise<string> => {\n  const payload = {\n    jsonrpc: '2.0',\n    method: 'LMT_handle_jobs',\n    params: {\n      jobs: [\n        {\n          kind: 'default',\n          sentences: [\n            {\n              text: text,\n              id: 1,\n              prefix: ''\n            }\n          ],\n          raw_en_context_before: [],\n          raw_en_context_after: [],\n          preferred_num_beams: 4\n        }\n      ],\n      lang: {\n        target_lang: from,\n        preference: {\n          weight: {},\n          default: 'default'\n        },\n        source_lang_computed: to\n      },\n      priority: -1,\n      commonJobParams: {\n        quality: 'fast',\n        mode: 'translate',\n        browserType: 1,\n        textType: 'plaintext'\n      },\n      timestamp: Date.now()\n    },\n    id: Math.floor(Math.random() * 1e8)\n  }\n\n  const response = await fetch('https://www2.deepl.com/jsonrpc?method=LMT_handle_jobs', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json',\n      'User-Agent':\n        'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36',\n      Referer: `https://www.deepl.com/translator#${from}/${to}/${encodeURIComponent(text)}`\n    },\n    body: JSON.stringify(payload)\n  })\n\n  const data = await response.json()\n\n  console.log(data)\n\n  return 'ok'\n}\n"],"names":["translatte","translatte1","text","from","to","baseURL","urlMethod","urlFull","encodeURIComponent","headers","Accept","Authorization","Origin","Referer","postData","jsonrpc","method","id","params","splitting","lang","source_lang_user_selected","toUpperCase","target_lang","texts","requestAlternatives","timestamp","Date","now","response","axios","post","translation","data","result","error","isAxiosError","console","Error","payload","jobs","kind","sentences","prefix","raw_en_context_before","raw_en_context_after","preferred_num_beams","preference","weight","default","source_lang_computed","priority","commonJobParams","quality","mode","browserType","textType","Math","floor","random","fetch","body","JSON","stringify","json","log"],"mappings":";;;;;;;;;;;IAgEaA,UAAU;eAAVA;;IApDAC,WAAW;eAAXA;;;8DAZK;;;;;;AAYX,MAAMA,cAAc,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAEC,EAAE,EAAsB;IACtE,MAAMC,UAAU;IAChB,MAAMC,YAAY;IAClB,MAAMC,UAAU,GAAGF,QAAQ,+CAA+C,EAAEG,mBAAmBF,YAAY;IAE3G,MAAMG,UAAU;QACd,gBAAgB;QAChB,cACE;QACFC,QAAQ;QACR,mBAAmB;QACnBC,eAAe;QACf,iBAAiB;QACjBC,QAAQ;QACRC,SAAS;IACX;IAEA,MAAMC,WAAW;QACfC,SAAS;QACTC,QAAQV;QACRW,IAAI;QACJC,QAAQ;YACNC,WAAW;YACXC,MAAM;gBACJC,2BAA2BlB,KAAKmB,WAAW;gBAC3CC,aAAanB,GAAGkB,WAAW;YAC7B;YACAE,OAAO;gBACL;oBACEtB;oBACAuB,qBAAqB;gBACvB;aACD;YACDC,WAAWC,KAAKC,GAAG;QACrB;IACF;IAEA,IAAI;QACF,MAAMC,WAAW,MAAMC,cAAK,CAACC,IAAI,CAACxB,SAASO,UAAU;YAAEL;QAAQ;QAE/D,MAAMuB,cAAcH,SAASI,IAAI,EAAEC,QAAQV,OAAO,CAAC,EAAE,EAAEtB,QAAQ;QAE/D,OAAO8B;IACT,EAAE,OAAOG,OAAO;QACd,IAAIL,cAAK,CAACM,YAAY,CAACD,QAAQ;YAC7BE,QAAQF,KAAK,CAAC,qBAAqBA,MAAMN,QAAQ,EAAEI;QACrD;QAEA,MAAM,IAAIK,MAAM;IAClB;AACF;AAEO,MAAMtC,aAAa,OAAO,EAAEE,IAAI,EAAEC,IAAI,EAAEC,EAAE,EAAsB;IACrE,MAAMmC,UAAU;QACdxB,SAAS;QACTC,QAAQ;QACRE,QAAQ;YACNsB,MAAM;gBACJ;oBACEC,MAAM;oBACNC,WAAW;wBACT;4BACExC,MAAMA;4BACNe,IAAI;4BACJ0B,QAAQ;wBACV;qBACD;oBACDC,uBAAuB,EAAE;oBACzBC,sBAAsB,EAAE;oBACxBC,qBAAqB;gBACvB;aACD;YACD1B,MAAM;gBACJG,aAAapB;gBACb4C,YAAY;oBACVC,QAAQ,CAAC;oBACTC,SAAS;gBACX;gBACAC,sBAAsB9C;YACxB;YACA+C,UAAU,CAAC;YACXC,iBAAiB;gBACfC,SAAS;gBACTC,MAAM;gBACNC,aAAa;gBACbC,UAAU;YACZ;YACA9B,WAAWC,KAAKC,GAAG;QACrB;QACAX,IAAIwC,KAAKC,KAAK,CAACD,KAAKE,MAAM,KAAK;IACjC;IAEA,MAAM9B,WAAW,MAAM+B,MAAM,yDAAyD;QACpF5C,QAAQ;QACRP,SAAS;YACP,gBAAgB;YAChB,cACE;YACFI,SAAS,CAAC,iCAAiC,EAAEV,KAAK,CAAC,EAAEC,GAAG,CAAC,EAAEI,mBAAmBN,OAAO;QACvF;QACA2D,MAAMC,KAAKC,SAAS,CAACxB;IACvB;IAEA,MAAMN,OAAO,MAAMJ,SAASmC,IAAI;IAEhC3B,QAAQ4B,GAAG,CAAChC;IAEZ,OAAO;AACT"}